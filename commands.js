const config = require('./config');
const GithubHelper = require('./github');
const SSHRemote = require('./ssh');
const { discord, RichEmbed } = require('discord.js');
const http = require("https");

const commands = {
    'nrefresh': {
        requiredPermissions: ['BAN_MEMBERS'],
        action: async function(msg, command) {
            // create a new SSH session to our remote server
            const sshRemote = new SSHRemote();
            await sshRemote.init(config.ssh);

            await sshRemote.cd("mirror.fortheusers.org");
            let res = await sshRemote.ls();
            msg.channel.send(res);
        }
    },
    'refresh': {
        requiredPermissions: ['BAN_MEMBERS'],
        action: async function (msg, command) {
            const cmds = msg.content.split(/ +/);
            cmds.shift();
            const repo = cmds.length ? cmds[cmds.length - 1] : 'switch';
            const url = `${repo}bru.com`;
            var options = {
                host: url,
                port: 443,
                path: '/appstore/repogen.py',
                method: 'GET'
            };

            msg.channel.send(`Refreshing ${url}...`);

            http.request(options, function(res) {
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    msg.channel.send(chunk.replace(/<br>/g, ""));
                });
            }).end();
        }
    },
    'search': {
        requiredPermissions: [],
        action: async function (msg, command) {
            const cmds = msg.content.split(/ +/);
            cmds.shift();
            const query = cmds.join(" ").toLowerCase();
            var options = {
                host: `switchbru.com`,
                port: 443,
                path: '/appstore/repo.json',
                method: 'GET'
            };

            http.request(options, function(res) {
                res.setEncoding('utf8');
                let resp = "";
                res.on('data', function (chunk) {
                    resp += chunk;
                });
                res.on('end', function () {
                    const repo = JSON.parse(resp)['packages'];
                    const res = repo.filter(pkg =>  {
                        return (pkg.name && pkg.name.toLowerCase().includes(query)) ||
                            (pkg.title && pkg.title.toLowerCase().includes(query)) ||
                            (pkg.author && pkg.author.toLowerCase().includes(query)) ||
                            (pkg.details && pkg.details.toLowerCase().includes(query)) ||
                            (pkg.description && pkg.description.toLowerCase().includes(query));
                    });
                    const res2 = res.map(p => `[${p.title}](https://apps.fortheusers.org/app/${p.name}) by ${p.author} / ${p.description}`);
                    res2.length = 10;
                    const blurb = new RichEmbed({
                        color: 0x2277aa,
                        description: res2.join("\n"),
                        footer: {text: "apps.fortheusers.org"}
                    });
                    msg.channel.send(blurb);
                });
            }).end();
        }
    },
    'updates': {
        requiredPermissions: ['BAN_MEMBERS'],
        action: async function(msg, command) {
            let toleranceCount = 0;
            let github = new GithubHelper();
            for (let repo of config.libget.repos) {
                msg.channel.send(`Checking repo: <${repo}>`);
                http.get(repo + 'repo.json', response => {
                    let body = "";
                    response.on('data', chunk => {
                        body += chunk;
                    });
                    response.on('end', function(){
                        let giveup = false;
                        let packages;
                        try {
                            packages = JSON.parse(body)['packages'];
                        } catch (e) {
                            msg.channel.send(new RichEmbed({
                                color: 0xC73228,
                                title: e.name + ' while parsing JSON',
                                description: e.message,
                                footer: {text: `Repo: ${repo}`}
                            }));
                            return;
                        }
                        for (let package of packages) {
                            if(!giveup) {
                                github.githubCheck(package.url, package.version.toLowerCase().replace(/^v/, ''), package.name).then(gCheck =>{
                                    const outOfDate = new RichEmbed({
                                        color: 0xFF9900,
                                        title: `${package.name} may be out of date`,
                                        description: `Ours is: \`${package.version}\`\nGithub's is:\`${gCheck.version}\`\n[Release Link](${gCheck.url})`,
                                        footer: {text: repo},
                                        url: gCheck.url
                                    });
                                    msg.channel.send(outOfDate);
                                    toleranceCount = 0;
                                }, e => {
                                    if (e.status != 200 && !giveup) {
                                        msg.channel.send('Github responded with status `' + e.status + '` while checking <' + e.name + '>');
                                        toleranceCount++;
                                        if (toleranceCount >= config.libget.toleranceMax) {
                                            msg.reply(`Gave up checking repos for updates in get repo ${repo} after ${config.libget.toleranceMax} attempts!`);
                                            giveup = true;
                                        }
                                    }
                                });
                            }
                        }
                    });
                    response.on('error', e => {
                        msg.reply(`Error occured while getting repo json, ${e.name}: ${e.message}`);
                    });
                });
            }
        }
    },
    "test": {
        requiredPermissions: ['BAN_MEMBERS'],
        action: async function(){
            var a = http.request({method: 'POST', hostname: '127.0.0.1', port: config.http.port, path: '/package', headers: {'Content-Type': 'application/json'}});
            a.write(JSON.stringify({"package":"Bestapp","type":"new","version":"1.0","trackGithub":false,"url":"https://github.com/4TU/Bestapp/releases","info":{"title":"Best app","author":"Someone","details":"Hello World!\\nDetails section","category":"tool","description":"Hello World!","license":"n/a"},"assets":[{"type":"icon","format":"base64","data":""},{"type":"screen","format":"url","data":"https://www.switchbru.com/appstore/images/noscreen.png"},{"type":"zip","url":"https://github.com/vgmoose/sdl-hello-world/archive/1.1.zip","files":[{"a":"a"}]}]}));
            a.end();
        }
    }
}

module.exports = commands;
